const {
  PermissionFlagsBits,
  SlashCommandBuilder,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  Colors,
} = require("discord.js");
const { botCustom, emojis } = require("../../config");
const messages = require(`../../Utils/Giveaways/message`);
const ms = require("ms");

module.exports = {
  category: "√ßekili≈ü",
  data: new SlashCommandBuilder()
    .setName("√ßekili≈ü")
    .setDescription("√áekil≈üerinizi y√∂netirsiniz.")
    .addSubcommand((subcommand) =>
      subcommand
        .setName("olu≈ütur")
        .setDescription("√áekili≈ü olu≈üturursunuz")
        .addStringOption((option) =>
          option
            .setName("s√ºre")
            .setDescription("√áekili≈ü s√ºresini belirtin.")
            .setRequired(true)
        )
        .addIntegerOption((option) =>
          option
            .setName("kazananlar")
            .setDescription("Kazanan sayƒ±sƒ±nƒ± belirtin.")
            .setRequired(true)
        )
        .addStringOption((option) =>
          option
            .setName("√∂d√ºl")
            .setDescription("√áekili≈ü √∂d√ºl√º.")
            .setRequired(true)
        )
        .addUserOption((option) =>
          option
            .setName("sponsor")
            .setDescription("√áekili≈üi yapmaya aracƒ± olan ki≈üi")
            .setRequired(false)
        )
        .addChannelOption((option) =>
          option
            .setName("kanal")
            .setDescription("√áekili≈üin yapƒ±lacaƒüƒ± kanal")
            .setRequired(false)
        )
    )
    .addSubcommand((subcommand) =>
      subcommand
        .setName("bitir")
        .setDescription("√áeki≈üi sonlandƒ±rƒ±rsƒ±nƒ±z.")
        .addStringOption((option) =>
          option
            .setName("mesaj_id")
            .setDescription("√áekili≈ü mesaj id'si")
            .setRequired(true)
        )
    )
    .addSubcommand((subcommand) =>
      subcommand
        .setName("yeniden-√ßek")
        .setDescription("√áekili≈üi yeniden yaparsƒ±nƒ±z.")
        .addStringOption((option) =>
          option
            .setName("mesaj_id")
            .setDescription("√áekili≈ü mesaj id'si")
            .setRequired(true)
        )
        .addStringOption((Option) =>
          Option.setName("kazananlar")
            .setDescription("Yeniden √ßekilecek kazanan sayƒ±sƒ±")
            .setRequired(false)
        )
    )
    .addSubcommand((subcommand) =>
      subcommand
        .setName("listele")
        .setDescription("Aktif √ßekili≈üleri listeler.")
    )
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
  run: async (client, interaction) => {
    const { options } = interaction;
    const subcommand = options.getSubcommand();

    const errEmbed = new EmbedBuilder().setColor(botCustom.redColor).setFooter({
      text: `Komutu Kullanan: ${interaction.user.tag}`,
      iconURL: interaction.user.displayAvatarURL(),
    });

    const successEmbed = new EmbedBuilder()
      .setColor(botCustom.greenColor)
      .setFooter({
        text: `Komutu Kullanan: ${interaction.user.tag}`,
        iconURL: interaction.user.displayAvatarURL(),
      });

    if (subcommand === "olu≈ütur") {
      const channel =
        interaction.options.getChannel("kanal") || interaction.channel;
      const hosted = interaction.options.getUser("sponsor");
      const duration = interaction.options.getString("s√ºre");
      const winnerCount = interaction.options.getInteger("kazananlar");
      const prize = interaction.options.getString("√∂d√ºl");

      if (isNaN(ms(duration))) {
        return interaction.reply({
          embeds: [
            errEmbed.setDescription("L√ºtfen ge√ßerli bir s√ºre girin!")
          ],
          ephemeral: true,
        });
      }

      if (winnerCount < 1) {
        return interaction.reply({
          embeds: [
            errEmbed
            .setDescription("L√ºtfen ge√ßerli bir kazanan sayƒ±sƒ± se√ßin! bire e≈üit veya b√ºy√ºk olmalƒ±dƒ±r.")
          ],
          ephemeral: true,
        });
      }

      messages.inviteToParticipate = `### Katƒ±lmak i√ßin üéâ ile tepki verin!`;
      messages.hostedBy = `Sponsor: {this.hostedBy}`;

      client.giveawaysManager.start(channel, {
        duration: ms(duration),
        winnerCount: parseInt(winnerCount),
        prize,
        hostedBy: hosted ? hosted : interaction.user,
        thumbnail: interaction.guild.iconURL({ dynamic: true }),
        messages,
      });

      await interaction.reply({
        embeds: [
          successEmbed.setDescription(
            `Giveaway ${channel} i√ßinde ba≈üladƒ±.`
          ),
        ],
        ephemeral: true,
      });
    }

    if (subcommand === "bitir") {
      const query = options.getString("mesaj_id");

      const giveaway =
        client.giveawaysManager.giveaways.find(
          (g) => g.prize === query && g.guildId === interaction.guild.id
        ) ||
        client.giveawaysManager.giveaways.find(
          (g) => g.messageId === query && g.guildId === interaction.guild.id
        );

      if (!giveaway) {
        return interaction.reply({
          embeds: [
            errEmbed.setDescription("√áekili≈ü bulunamadƒ±.")
          ],
          ephemeral: true,
        });
      }

      if (giveaway.ended) {
        return interaction.reply({
          embeds: [
            errEmbed.setDescription("√áekili≈ü √ßoktan sona erdi.")
          ],
          ephemeral: true,
        });
      }

      client.giveawaysManager
        .end(giveaway.messageId)
        .then(async () => {
          await interaction.reply({
            embeds: [
              successEmbed.setDescription(`√áekili≈ü sona erdi.`),
            ],
            ephemeral: true,
          });
        })
        .catch((err) => {
          interaction.reply(
            `Bir hata olu≈ütu, l√ºtfen kontrol edip tekrar deneyin.\n\`${err}\``
          );
        });
    }

    if (subcommand === "yeniden-√ßek") {
      const query = options.getString("mesaj_id");
      const winnerCount = options.getString("kazananlar");

      const giveaway =
        client.giveawaysManager.giveaways.find(
          (g) => g.prize === query && g.guildId === interaction.guild.id
        ) ||
        client.giveawaysManager.giveaways.find(
          (g) => g.messageId === query && g.guildId === interaction.guild.id
        );

      if (!giveaway) {
        return interaction.reply({
          embeds: [
            errEmbed.setDescription("√áekili≈ü bulunamadƒ±.")
          ],
          ephemeral: true,
        });
      }

      if (!giveaway.ended) {
        return interaction.reply({
          embeds: [
            errEmbed.setDescription("√áekili≈ü hen√ºz sona ermedi.")
          ],
          ephemeral: true,
        });
      }

      if (isNaN(winnerCount)) {
        return interaction.reply({
          embeds: [
            errEmbed.setDescription("L√ºtfen ge√ßerli bir kazanan sayƒ±sƒ± girin!")
          ],
          ephemeral: true,
        });
      }

      client.giveawaysManager
        .reroll(giveaway.messageId, {
          ...(winnerCount && { winnerCount: parseInt(winnerCount) }),
        })
        .then(async () => {
          await interaction.reply({
            embeds: [
              successEmbed.setDescription(`√áekili≈ü tekrarlandƒ±.`),
            ],
            ephemeral: true,
          });
        })
        .catch((err) => {
          interaction.reply(
            `Bir hata olu≈ütu, l√ºtfen kontrol edip tekrar deneyin.\n\`${err}\``
          );
        });
    }

    if (subcommand === "listele") {
      let giveaways = client.giveawaysManager.giveaways.filter(
        (g) => g.guildId === `${interaction.guild.id}` && !g.ended
      );

      if (!giveaways.some((e) => e.messageId)) {
        return interaction.reply({
          embeds: [
            errEmbed.setDescription("Aktif hediye yok.")
          ],
          ephemeral: true,
        });
      }

      let embed = new EmbedBuilder()
        .setTitle("üéâ ≈ûu Anda Aktif Olan √áekili≈üler üéâ")
        .setColor(Colors.Blue)
        .setFooter({
          text: `Komutu Kullanan: ${interaction.user.username}`,
          iconURL: interaction.user.displayAvatarURL(),
        })
        .setTimestamp();

      await Promise.all(
        giveaways.map(async (x) => {
          embed.addFields({
            name: "√áekili≈üler:",
            value: `**√ñd√ºl:** **[${
              x.prize
            }](https://discord.com/channels/${x.guildId}/${x.channelId}/${
              x.messageId
            })**\n**Ba≈ülangƒ±√ß:** <t:${(x.startAt / 1000).toFixed(
              0
            )}:R> (<t:${(x.startAt / 1000).toFixed(0)}:f>)\n
            **Biti≈ü:** <t:${(x.endAt / 1000).toFixed(0)}:R> (<t:${(
              x.endAt / 1000
            ).toFixed(0)}:f>)`,
          });
        })
      );

      await interaction.reply({ embeds: [embed] });
    }
  },
};
